package com.utc.daoImpl;
import com.utc.beans.*;

import java.sql.Connection;
import com.utc.exceptions.*;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import com.utc.beans.User;
import static  com.utc.daoImpl.DAOUtility.*;

import com.utc.dao.UserDao;
import com.utc.factory.DAOFactory;

public class UserDaoImpl implements UserDao {
	private DAOFactory daoFactory;
	private static final String SQL_CHECK_BY_EMAIL ="SELECT u.userId,i.inscriptionId FROM projetJEE.user u, projetJEE.inscription i where u.email = ? or i.email=?;";
	private static final String SQL_SELECT_BY_EMAIL ="SELECT u.userId,u.telephone,u.dateCreation,u.adresse,u.username,u.password,u.email,u.status FROM projetJEE.user u,  where u.email = ? ;";
	private static final String SQL_SELECT_BY_ID = "SELECT userId,username,password,email,dateCreation,telephone,adresse,status FROM projetJEE.user FROM projetJEE.user where userId = ?;";
	private static final String SQL_SELECT_BY_USERNAME = "SELECT userId,username,password,email,dateCreation,telephone,adresse,status FROM projetJEE.user where username= ?;";
	private static final String SQL_INSERT_USER = "INSERT INTO projetJEE.inscription (`username`, `password`, `email`, `dateCreation`, `telephone`, `adresse`, `status`) VALUES (?,?, ?, ?, ?, ?, ?);";
	private static final String SQL_INSERT_USER_ROLE = "INSERT INTO projetJEE.usersandroles (`userId`, `roleId`) values(?,?);";
	private static final String SQL_SELECT_ALL = "SELECT userId,username,password,email,dateCreation,telephone,adresse FROM projetJEE.user;";
	private static final String SQL_DESACTIVE_USER= "update  projetJEE.user set `status` = ?  where `userId`=?; ";
	private static final String SQL_INSERT_ROLE_USER= "INSERT into  projetJEE.usersandroles (`userId`, `roleId`) VALUES (?,?);";
	private static final String SQL_DESACTIVE_ROLE_USER= "delete  projetJEE.usersandroles  where `userId`=? and roleId=?; ";
	private static final String SQL_SELECT_ROLE="SELECT u.userId,u.username,u.password,u.email,u.status,r.roleId, r.roleName FROM projetJEE.user u, projetJEE.role r, projetJEE.usersandroles ur where u.email = ? and ur.userId=u.userId and ur.roleId=r.roleId;";
	public UserDaoImpl(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
	@Override
	public void create(User user) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet autogeneratedResultSet = null;
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection,
					SQL_INSERT_USER, true,user.getUsername(), user.getPassword(), user.getEmail(),
					 user.getCreation_date(), user.getTelephone(),user.getAddresse(),user.getStatus());
		//	
			int status = preparedStatement.executeUpdate();
			if (status == 0) {
				throw new DAOException(
						"Database insertion to user  failure. No line inserted.");
			}
			autogeneratedResultSet = preparedStatement.getGeneratedKeys();
			if (autogeneratedResultSet.next()) {
				user.setUserId(autogeneratedResultSet.getLong(1));
			} else {
				throw new DAOException(
						"Database insertion failure. No autogenerated id returned.");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			silentCloses(preparedStatement, connection, autogeneratedResultSet);
		}
	}

	@Override
	public User findByEmail (String email) throws DAOException {
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		User user = null;
		try {
			//System.out.println("Hello world");
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection,
					SQL_SELECT_BY_EMAIL, false, email);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				user = map(resultSet);
				System.out.println("Found :" + user.getEmail() );
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			silentCloses(preparedStatement, connection, resultSet);
		}

		return user;
	}
	@Override
	public User findByID(int id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		User user = null;
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection,
					SQL_SELECT_BY_ID, false, id);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				user = map(resultSet);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			silentCloses(preparedStatement, connection, resultSet);
		}

		return user;
	}
	
	@Override
	public User findByUsername(String username) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		User user = null;
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection,
					SQL_SELECT_BY_USERNAME, false, username);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				user = map(resultSet);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			silentCloses(preparedStatement, connection, resultSet);
		}

		return user;
	}

	
	@Override
	public boolean desactiveUser(int userId) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
	boolean succes=false;
		User user = null;
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection,
					SQL_DESACTIVE_USER,false,userId);
			int status = preparedStatement.executeUpdate();
				if (status == 0) {
					throw new DAOException(
							"Database desactive user failed . No line modified .");
				}
				else{
					succes=true;
				}
		} catch (SQLException e) {
				throw new DAOException(e);
		} 
		finally {
			silentCloses(preparedStatement, connection);
		}
	
		return succes;
	}
	

	@Override
	public List<User> findAllUsers() throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		User user = null;
		List<User> users= new LinkedList<User>();
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection,
					 SQL_SELECT_ALL, false);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				user = map(resultSet);
				users.add(user);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			silentCloses(preparedStatement, connection, resultSet);
		}

		return users;
	}
	
	@Override
	public boolean deleteUser(int userId) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
	boolean succes=false;
		User user = null;
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection,
					SQL_DESACTIVE_USER,false,userId);
			int status = preparedStatement.executeUpdate();
				if (status == 0) {
					throw new DAOException(
							"Database delete user failed . No line modified .");
				}
				else{
					succes=true;
				}
		} catch (SQLException e) {
				throw new DAOException(e);
		} 
		finally {
			silentCloses(preparedStatement, connection);
		}
	
		return succes;
	}
		
	

	@Override
	public boolean HandleRoleUser(int userId, int roleId,String action) throws DAOException {
		//add  or delete a role for a user  
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		String requete=null;
		boolean success=false;
		requete= action.equals("delete")? SQL_DESACTIVE_ROLE_USER :SQL_INSERT_ROLE_USER;
		
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection,
					requete,false,userId,roleId);
		//	
			int status = preparedStatement.executeUpdate();
			if (status == 0) {
				throw new DAOException(
						"Database insertion or delete  user role   failure. No line added or delelted.");
			}
			else {
				success=true;
			}
			
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			silentCloses(preparedStatement, connection);
		}
		
		return success;
	}

	@Override
	public User findUserRoles(String email) throws DAOException {
		// getting all the user set for user having his id userId
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		User user =  new User();
		Roles role=new Roles();
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection,
					SQL_SELECT_ROLE, false,email);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				user.setEmail(resultSet.getString("email"));
				user.setUsername(resultSet.getString("username"));
				user.setUserId(resultSet.getLong("userId"));
				user.setPassword(resultSet.getString("password"));
				do {
					role.setRole(resultSet.getString("roleName"));
					role.setRoleId(resultSet.getLong("userId"));
					user.getRoles().add(role);
				}while(resultSet.next());
				
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			silentCloses(preparedStatement, connection, resultSet);
		}
		
		return user;
	}
	
	private static User map(ResultSet resultSet) throws SQLException {
		User user = new User();
		user.setUserId(resultSet.getLong("userId"));
		user.setEmail(resultSet.getString("email"));
		user.setPassword(resultSet.getString("password"));
		user.setUsername(resultSet.getString("username"));
		user.setTelephone(resultSet.getString("telephone"));
		user.setCreation_date(resultSet.getString("dateCreation"));
		user.setAddresse(resultSet.getString("addresse"));
		user.setStatus(resultSet.getString("status"));
		
		
		return user;
	}

	@Override
	public boolean checkEmail(String email) throws DAOException {
		Connection connection = null;
		boolean exist=false;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			//System.out.println("Hello world");
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection,
					SQL_CHECK_BY_EMAIL, false, email,email);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				exist=true;
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			silentCloses(preparedStatement, connection, resultSet);
		}

		return exist;
	}
}
