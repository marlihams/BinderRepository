package com.utc.daoImpl;

import static com.utc.daoImpl.DAOUtility.initializePreparedStatement;
import static com.utc.daoImpl.DAOUtility.silentCloses;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;

import com.utc.beans.Auteur;
import com.utc.beans.User;
import com.utc.dao.AuteurDao;
import com.utc.exceptions.DAOException;
import com.utc.factory.DAOFactory;

public class AuteurDaoImpl implements AuteurDao {
	private DAOFactory daoFactory;
	public AuteurDaoImpl(DAOFactory daoFactory) {
		super();
		this.daoFactory = daoFactory;
	}
	
	private static final String SQL_SELECT_BY_ID = "SELECT a.name,a.auteurId FROM projetJEE.auteur where auteurId = ?;";
	private static final String SQL_SELECT_BY_AUTEURNAME = "SELECT a.name,a.auteurId FROM projetJEE.auteur a where a.name = ?;";
	private static final String SQL_INSERT_AUTEUR = "INSERT INTO projetJEE.auteur (`name`) VALUES (?);";
	private static final String SQL_SELECT_ALL ="select auteurId,name from  projetJEE.auteur ;";
	private static final String SQL_DELETE_AUTEUR= "delete  from projetJEE.auteur where auteurId= ? ;";
	
	
	@Override
	public Auteur create(Auteur auteur) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet autogeneratedResultSet = null;
		try {
			connection = daoFactory.getConnection();
			if(auteur!=null){
			preparedStatement = initializePreparedStatement(connection,
					SQL_INSERT_AUTEUR, true,auteur.getName());
			}
		
			int status = preparedStatement.executeUpdate();
			if (status == 0) {
				throw new DAOException(
						"Database insertion to user  failure. No line inserted.");
			}
			autogeneratedResultSet = preparedStatement.getGeneratedKeys();
			if (autogeneratedResultSet.next()) {
				auteur.setAuteurId(autogeneratedResultSet.getLong(1));
			} else {
				throw new DAOException(
						"Database insertion failure. No autogenerated id returned.");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			silentCloses(preparedStatement, connection, autogeneratedResultSet);
		}
		return auteur;
	}

	@Override
	public boolean delete(Auteur auteur) throws DAOException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public List<Auteur> findAllAuteurs() throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Auteur auteur = null;
		List<Auteur> auteurs= new LinkedList<Auteur>();
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection,
					 SQL_SELECT_ALL, false);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				auteur = mapAuteur(resultSet);
				auteurs.add(auteur);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			silentCloses(preparedStatement, connection, resultSet);
		}

		return auteurs;
	}


	@Override
	public Auteur findAuteurByIdOrAuteurName(String action,String auteurIdorName) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Auteur auteur = null;
		String requete=null;
		boolean bool=false;
		
		if (action.equals("name")){
			requete=SQL_SELECT_BY_AUTEURNAME;
		}
		else {
			bool=true;
			requete=SQL_SELECT_BY_ID;
		}
		
		try {
			//System.out.println("Hello world");
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection,
					requete, false,bool?Integer.parseInt(auteurIdorName):auteurIdorName);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				auteur = mapAuteur(resultSet);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			silentCloses(preparedStatement, connection, resultSet);
		}

		return auteur;
	}
	

	private static Auteur mapAuteur(ResultSet resultSet) throws SQLException {
		Auteur auteur = new Auteur();
		auteur.setAuteurId(resultSet.getLong("auteurId"));
		auteur.setName(resultSet.getString("name"));
		
		return auteur;
	}

}
